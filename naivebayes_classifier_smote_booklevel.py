# -*- coding: utf-8 -*-
"""NaiveBayes_Classifier_SMOTE_Booklevel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Xb4pY7rFLgTQG-_fa73cUg9GPAR4Ga5
"""

import pandas  as pd 
import matplotlib.pyplot as plt 
import numpy as np 
from sklearn.linear_model import LogisticRegression 
from sklearn.preprocessing import StandardScaler 
from sklearn.metrics import confusion_matrix, classification_report 
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
import seaborn as sns
from sklearn.preprocessing import StandardScaler,MinMaxScaler
import imblearn
from matplotlib import cm
from pandas.plotting import radviz

dataframe = pd.read_csv(r'/content/Export_Jun-21-2020_1356.csv')
dataframe = dataframe.drop(['book_name', 'author_name','book_id'], axis = 1) 
list_label = dataframe.genre.unique()
col_list = dataframe.columns.to_list()

indexNames = dataframe[dataframe['genre'] == 'Unlabelled'].index
dataframe.drop(indexNames , inplace=True)

def scaledown(columnlist):
  for i in columnlist:
    if str(i) == 'genre' or str(i) == 'Positive_Sentiment' or str(i) == 'Neutral_Sentiment' or str(i) == 'Negative_Sentiment'  or  str(i) == 'book_id' or i == 'TTR':
      pass
    else:
      dataframe[str(i)] = MinMaxScaler().fit_transform(np.array(dataframe[str(i)]).reshape(-1, 1))

scaledown(col_list)

data_split_label = pd.DataFrame([])
dataframe.drop(dataframe[dataframe['genre'] == 'Allegories'].index, inplace = True)
data_split_label = dataframe['genre']

data_split = dataframe.drop(['genre'], axis = 1) 
X_train, X_test, y_train, y_test = train_test_split(data_split, data_split_label, test_size = 0.2, random_state = 0)

from imblearn.over_sampling import SMOTE 
sm = SMOTE(kind='regular',k_neighbors=1)
X_train_res, y_train_res = sm.fit_sample(X_train, y_train)

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X_train_res, y_train_res);

pred = model.predict(X_test)

from sklearn import metrics
score = metrics.accuracy_score(y_test, pred)
score1 = metrics.classification_report(y_test, pred )
print(score1)
print("accuracy:   %0.5f" % score)